const User = require('../models/UserModel');
const jwt = require('jsonwebtoken');

const JWT_SECRET = 'secret123'; // G√°n tr·ª±c ti·∫øp chu·ªói b√≠ m·∫≠t ·ªü ƒë√¢y

// ƒêƒÉng k√Ω
const register = async (req, res) => {
    try {
        const { username, email, password, fullName, phoneNumber, role } = req.body;

        // Ki·ªÉm tra t·ªìn t·∫°i
        const existingUser = await User.findOne({ $or: [{ username }, { email }] });
        if (existingUser) {
            return res.status(400).json({ message: 'Username ho·∫∑c email ƒë√£ t·ªìn t·∫°i' });
        }

        // T·∫°o ng∆∞·ªùi d√πng m·ªõi
        const newUser = new User({
            username,
            email,
            password,
            fullName,
            phoneNumber,
            role
        });
        await newUser.save();

        res.status(201).json({ message: 'ƒêƒÉng k√Ω th√†nh c√¥ng', data: newUser });
    } catch (err) {
        // üëá S·ª≠a ·ªü ƒë√¢y: x·ª≠ l√Ω l·ªói validation Mongoose
    if (err.name === 'ValidationError') {
        return res.status(400).json({ errors: err.errors });
      }
  
      // L·ªói kh√°c
      res.status(500).json({ message: 'ƒê√£ x·∫£y ra l·ªói', error: err.message });
    }
};

// ƒêƒÉng nh·∫≠p
const login = async (req, res) => {
    try {
        const { usernameOrEmail, password } = req.body;

        // T√¨m user theo username ho·∫∑c email
        const user = await User.findOne({
            $or: [{ username: usernameOrEmail }, { email: usernameOrEmail }]
        });
        if (!user) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng' });

        // So s√°nh m·∫≠t kh·∫©u
        const isMatch = await user.comparePassword(password);
        if (!isMatch) return res.status(400).json({ message: 'Sai m·∫≠t kh·∫©u' });

        // T·∫°o JWT
        const token = jwt.sign({ userId: user._id, role: user.role }, JWT_SECRET, {
            expiresIn: '7d'
        });

        res.json({ message: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng', token, user });
    } catch (err) {
        res.status(500).json({ message: 'ƒê√£ x·∫£y ra l·ªói', error: err.message });
    }
};

module.exports = { register, login };
