const userService = require("../services/user.service");
const User = require("../models/UserModel");

// L·∫•y t·∫•t c·∫£ ng∆∞·ªùi d√πng ch∆∞a b·ªã x√≥a
const getAllUsers = async (req, res) => {
  try {
    const users = await userService.getAllUsers();
    res.json(users);
    
  } catch (error) {
    res.status(500).json({ message: "ƒê√£ x·∫£y ra l·ªói", error: error.message });
  }
};

// L·∫•y ng∆∞·ªùi d√πng theo ID
const getUserById = async (req, res) => {
  try {
    const user = await userService.getUserById(req.params.id);
    if (!user) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });
    }
    res.json(user);
  } catch (error) {
    res.status(500).json({ message: "ƒê√£ x·∫£y ra l·ªói", error: error.message });
  }
};

// T·∫°o m·ªõi m·ªôt ng∆∞·ªùi d√πng
const createUser = async (req, res) => {
  try {
    const newUser = await userService.createUser(req.body);
    res.status(201).json({ message: "Ng∆∞·ªùi d√πng ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng", data: newUser });
  } catch (error) {
    res.status(400).json({ message: "ƒê√£ x·∫£y ra l·ªói", error: error.message });
  }
};

// C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
const updateUser = async (req, res) => {
  try {
    const { id } = req.params;
    const updateData = req.body;

    // C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng v·ªõi runValidators: true
    const updatedUser = await User.findByIdAndUpdate(id, updateData, {
      new: true,
      runValidators: true, // B·∫≠t ki·ªÉm tra r√†ng bu·ªôc schema
    });

    if (!updatedUser) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });
    }

    res.status(200).json({ message: "Ng∆∞·ªùi d√πng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t", data: updatedUser });
  } catch (error) {
    res.status(500).json({ message: "ƒê√£ x·∫£y ra l·ªói", error: error.message });
  }
};

// ƒê√°nh d·∫•u ng∆∞·ªùi d√πng l√† ƒë√£ x√≥a m·ªÅm (Soft Delete)
const softDeleteUser = async (req, res) => {
  try {
    const user = await userService.softDeleteUser(req.params.id);
    if (!user) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });
    }
    res.json({ message: "Ng∆∞·ªùi d√πng ƒë√£ ƒë∆∞·ª£c ƒë√°nh d·∫•u l√† ƒë√£ x√≥a m·ªÅm" });
  } catch (error) {
    res.status(500).json({ message: "ƒê√£ x·∫£y ra l·ªói", error: error.message });
  }
};

// Kh√¥i ph·ª•c ng∆∞·ªùi d√πng ƒë√£ x√≥a
const restoreUser = async (req, res) => {
  try {
    const user = await userService.restoreUser(req.params.id);
    if (!user) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });
    }
    res.json({ message: "Ng∆∞·ªùi d√πng ƒë√£ ƒë∆∞·ª£c kh√¥i ph·ª•c" });
  } catch (error) {
    res.status(500).json({ message: "ƒê√£ x·∫£y ra l·ªói", error: error.message });
  }
};

// L·∫•y danh s√°ch ng∆∞·ªùi d√πng v·ªõi ph√¢n trang, t√¨m ki·∫øm, v√† l·ªçc
const getUsers = async (req, res) => {
  try {
    const { page = 1, limit = 10, search, role, status } = req.query;
    const skip = (page - 1) * limit;
    const filter = { deletedAt: null }; // Ch·ªâ l·∫•y ng∆∞·ªùi d√πng ch∆∞a b·ªã x√≥a m·ªÅm

    // T√¨m ki·∫øm theo t√™n ho·∫∑c email
    if (search) {
      filter.$or = [
        { username: { $regex: search, $options: "i" } }, // T√¨m ki·∫øm theo t√™n
        { email: { $regex: search, $options: "i" } },    // T√¨m ki·∫øm theo email
      ];
    }

    // L·ªçc theo vai tr√≤ (role)
    if (role) {
      filter.role = role; // V√≠ d·ª•: "admin" ho·∫∑c "user"
    }

    // L·ªçc theo tr·∫°ng th√°i (status)
    if (status) {
      filter.status = status === "active"; // "active" -> true, "inactive" -> false
    }

    // L·∫•y danh s√°ch ng∆∞·ªùi d√πng v·ªõi ph√¢n trang
    const users = await User.find(filter)
      .select('-password')
      .skip(skip)
      .limit(parseInt(limit));

    const total = await User.countDocuments(filter);

    res.status(200).json({
      message: "Danh s√°ch ng∆∞·ªùi d√πng",
      data: users,
      pagination: {
        total,
        page: parseInt(page),
        limit: parseInt(limit),
        totalPages: Math.ceil(total / limit),
      },
    });
  } catch (error) {
    res.status(500).json({ message: "ƒê√£ x·∫£y ra l·ªói", error: error.message });
  }
};

// Th·ªëng k√™ user ƒëƒÉng k√Ω m·ªõi
const getRegistrationStats = async (req, res) => {
  try {
    const { startDate, endDate, groupBy } = req.query;
    const stats = await userService.getRegistrationStats(startDate, endDate, groupBy);
    res.status(200).json({ message: "Th·ªëng k√™ ng∆∞·ªùi d√πng ƒëƒÉng k√Ω m·ªõi", data: stats });
  } catch (error) {
    res.status(500).json({ message: "ƒê√£ x·∫£y ra l·ªói", error: error.message });
  }
};
const getMe = async (req, res) => {
  try {
    const user = await User.findById(req.user.userId).select("-password");
    if (!user) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });
    res.json(user);
  } catch (error) {
    res.status(500).json({ message: "ƒê√£ x·∫£y ra l·ªói", error: error.message });
  }
};

const updateMe = async (req, res) => {
  try {
    if (!req.user || !req.user.userId) {
      return res.status(401).json({ message: "Kh√¥ng x√°c th·ª±c ƒë∆∞·ª£c ng∆∞·ªùi d√πng" });
    }

    const { fullName, username, email, phoneNumber, avatar } = req.body;

    console.log("üîß D·ªØ li·ªáu nh·∫≠n:", { fullName, username, email, phoneNumber });

    if (avatar) {
      console.log("üñºÔ∏è Avatar length:", avatar.length);
      if (!avatar.startsWith("data:image")) {
        return res.status(400).json({ message: "·∫¢nh ƒë·∫°i di·ªán kh√¥ng h·ª£p l·ªá" });
      }
    }

    const updateFields = {
      fullName,
      username,
      email
    };

    if (phoneNumber) updateFields.phoneNumber = phoneNumber;
    if (avatar) updateFields.avatar = avatar;

    const updated = await User.findByIdAndUpdate(
      req.user.userId,
      updateFields,
      { new: true, runValidators: true }
    );

    if (!updated) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });
    }

    res.json({ message: "C·∫≠p nh·∫≠t th√†nh c√¥ng", user: updated });
  } catch (err) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t user:");
    console.error("‚û°Ô∏è Message:", err.message);
    console.error("‚û°Ô∏è Stack:", err.stack);
  
    if (err.name === "ValidationError") {
      const errorMessages = {};
      for (const field in err.errors) {
        errorMessages[field] = err.errors[field].message;
      }
      return res.status(400).json({ message: "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá", errors: errorMessages });
    }
  }    
};

module.exports = {
  getAllUsers,
  getUserById,
  createUser,
  updateUser,
  softDeleteUser,
  restoreUser,
  getUsers,
  getRegistrationStats,
  getMe,
  updateMe,
};